//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SqlSync.SqlBuild.Dependent.UnitTest.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SqlSync.SqlBuild.Dependent.UnitTest.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT 1 FROM sys.objects WHERE name = &apos;SqlBuild_Logging&apos; AND type = &apos;U&apos;)
        ///BEGIN
        ///	IF EXISTS (SELECT 1 FROM dbo.SqlBuild_Logging WHERE CommitDate &lt; &apos;{0}&apos;)
        ///	BEGIN
        ///		DELETE FROM SqlBuild_Logging
        ///	END
        ///END.
        /// </summary>
        public static string CleanLoggingTable {
            get {
                return ResourceManager.GetString("CleanLoggingTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = &apos;TransactionTest&apos; AND TABLE_SCHEMA = &apos;dbo&apos;)
        ///BEGIN
        ///	IF EXISTS (SELECT 1 FROM dbo.TransactionTest WHERE DateTimeStamp &lt; &apos;{0}&apos;)
        ///	BEGIN
        ///		DELETE FROM TransactionTest
        ///	END
        ///END.
        /// </summary>
        public static string CleanTestTable {
            get {
                return ResourceManager.GetString("CleanTestTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USE [master]
        ///GO
        ///CREATE DATABASE [{0}] ON  PRIMARY 
        ///( NAME = N&apos;{0}&apos;, FILENAME = N&apos;{1}\{0}.mdf&apos; , SIZE = 3072KB , MAXSIZE = UNLIMITED, FILEGROWTH = 1024KB )
        /// LOG ON 
        ///( NAME = N&apos;{0}_log&apos;, FILENAME = N&apos;{1}\{0}_log.ldf&apos; , SIZE = 1024KB , MAXSIZE = 2048GB , FILEGROWTH = 10%)
        ///GO
        ///IF (1 = FULLTEXTSERVICEPROPERTY(&apos;IsFullTextInstalled&apos;))
        ///begin
        ///EXEC [{0}].[dbo].[sp_fulltext_database] @action = &apos;disable&apos;
        ///end
        ///GO
        ///ALTER DATABASE [{0}] SET ANSI_NULL_DEFAULT OFF 
        ///GO
        ///ALTER DATABASE [{0}] SET ANSI_NULLS OFF 
        ///GO
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CreateDatabaseScript {
            get {
                return ResourceManager.GetString("CreateDatabaseScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = &apos;TransactionTest&apos; AND TABLE_SCHEMA = &apos;dbo&apos;)
        ///BEGIN
        ///	CREATE TABLE [dbo].[TransactionTest](
        ///	[ID] [int] IDENTITY(1,1) NOT NULL,
        ///	[Message] [varchar](200) NULL,
        ///	[Guid] [uniqueidentifier] NULL,
        ///	[DateTimeStamp] [datetime] NULL
        ///) ON [PRIMARY]
        ///END.
        /// </summary>
        public static string CreateTestTablesScript {
            get {
                return ResourceManager.GetString("CreateTestTablesScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] DBList {
            get {
                object obj = ResourceManager.GetObject("DBList", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT 1 FROM SqlBuild_Logging WHERE [ScriptId] = &apos;{0}&apos;) 
        ///
        ///BEGIN 
        ///
        ///INSERT INTO SqlBuild_Logging(
        ///	[BuildFileName],
        ///	[ScriptFileName],
        ///	[ScriptId],
        ///	[ScriptFileHash],
        ///	[CommitDate],
        ///	[Sequence],
        ///	[UserId],
        ///	[AllowScriptBlock],
        ///	[AllowBlockUpdateId],
        ///	[ScriptText],
        ///	[Tag],
        ///	[TargetDatabase],
        ///	[RunWithVersion],
        ///	[BuildProjectHash],
        ///	[BuildRequestedBy],
        ///	[ScriptRunStart],
        ///	[ScriptRunEnd],
        ///	[Description]
        ///)
        ///VALUES(
        ///	&apos;TestPreRun-FileName&apos;,
        ///	&apos;TestPreRunScriptName&apos;,
        ///	&apos;{0}&apos;,
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string InsertPreRunScriptLogEntryScript {
            get {
                return ResourceManager.GetString("InsertPreRunScriptLogEntryScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE name = &apos;SqlBuild_Logging&apos; AND type = &apos;U&apos;)
        ///	BEGIN
        ///
        ///     	CREATE TABLE [dbo].[SqlBuild_Logging]
        ///		(
        ///			[BuildFileName] [varchar](300) NOT NULL,
        ///			[ScriptFileName] [varchar](300) NOT NULL,
        ///			[ScriptId] [uniqueidentifier] NULL,
        ///			[ScriptFileHash] [varchar](100) NULL,
        ///			[CommitDate] [datetime] NOT NULL,
        ///			[Sequence] [int] NULL,
        ///			[UserId] [varchar](50) NULL,
        ///			[AllowScriptBlock] [bit] CONSTRAINT DF_SqlBuildLogging_AllowScriptBlock DEFAULT (1) ,
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LoggingTable {
            get {
                return ResourceManager.GetString("LoggingTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to --Add extra index to improve hash check performance
        ///IF NOT  EXISTS (SELECT 1 FROM sysindexes WHERE name = &apos;IX_SqlBuild_Logging_CommitCheck&apos;  AND OBJECT_NAME(id) = N&apos;SqlBuild_Logging&apos;)
        ///BEGIN
        ///	 CREATE NONCLUSTERED INDEX [IX_SqlBuild_Logging_CommitCheck] ON [dbo].[SqlBuild_Logging] 
        ///	(
        ///		[ScriptId] ASC,
        ///		[CommitDate] DESC
        ///	)
        ///	INCLUDE ( [ScriptFileHash],	[AllowScriptBlock]) 
        ///	WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF) ON [PRIMARY]
        ///
        ///END
        ///.
        /// </summary>
        public static string LoggingTableCommitCheckIndex {
            get {
                return ResourceManager.GetString("LoggingTableCommitCheckIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] multi_query {
            get {
                object obj = ResourceManager.GetObject("multi-query", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
        ///&lt;ArrayOfServerData xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
        ///  &lt;ServerData&gt;
        ///    &lt;ServerName&gt;Server1\Instance_1&lt;/ServerName&gt;
        ///    &lt;OverrideSequence&gt;
        ///      &lt;item&gt;
        ///        &lt;key&gt;
        ///          &lt;string&gt;0&lt;/string&gt;
        ///        &lt;/key&gt;
        ///        &lt;value&gt;
        ///          &lt;ArrayOfDatabaseOverride&gt;
        ///            &lt;DatabaseOverride&gt;
        ///              &lt;DefaultDbTarget&gt;Default&lt;/DefaultDbTarget&gt;
        ///              &lt;OverrideDbTarget&gt;Db_0001&lt;/Ove [rest of string was truncated]&quot;;.
        /// </summary>
        public static string MultiDb_WithQueryRowData {
            get {
                return ResourceManager.GetString("MultiDb_WithQueryRowData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] NoTrans_MultiDb {
            get {
                object obj = ResourceManager.GetObject("NoTrans_MultiDb", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] NoTrans_MultiDb1 {
            get {
                object obj = ResourceManager.GetObject("NoTrans_MultiDb1", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] PlatunumSchema {
            get {
                object obj = ResourceManager.GetObject("PlatunumSchema", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExeServer1
        ///ExeServer2.
        /// </summary>
        public static string remote_server_list {
            get {
                return ResourceManager.GetString("remote_server_list", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExeServer3           
        ///ExeServer4						.
        /// </summary>
        public static string remote_server_list_with_spaces {
            get {
                return ResourceManager.GetString("remote_server_list_with_spaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ExeServer5           
        ///ExeServer6						
        ///
        ///
        ///
        ///.
        /// </summary>
        public static string remote_server_list_with_spaces_and_blank_lines {
            get {
                return ResourceManager.GetString("remote_server_list_with_spaces_and_blank_lines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] sbx_package_tester {
            get {
                object obj = ResourceManager.GetObject("sbx_package_tester", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*
        ///Deployment script for billingclient11
        ///
        ///This code was generated by a tool.
        ///Changes to this file may cause incorrect behavior and will be lost if
        ///the code is regenerated.
        ///*/
        ///
        ///GO
        ///SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;
        ///
        ///SET NUMERIC_ROUNDABORT OFF;
        ///
        ///
        ///GO
        ///:setvar DatabaseName &quot;billingclient11&quot;
        ///:setvar DefaultFilePrefix &quot;billingclient11&quot;
        ///:setvar DefaultDataPath &quot;&quot;
        ///:setvar DefaultLogPath &quot;&quot;
        ///
        ///GO
        ///:on error exit
        ///GO
        ////*
        ///Detect SQL [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SyncScriptRaw {
            get {
                return ResourceManager.GetString("SyncScriptRaw", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to BEGIN TRANSACTION
        ///INSERT INTO dbo.TransactionTest VALUES (&apos;PROCESS LOCK&apos;, newid(), getdate())
        ///DECLARE @Count INT
        ///SET @Count=0
        ///WHILE @Count &lt; {0}   --near infinite loop...
        ///BEGIN  
        ///       SELECT TOP 1 *  FROM dbo.TransactionTest WITH (TABLOCKX)
        ///       SET @Count = @Count+1
        ///END  
        ///COMMIT TRANSACTION.
        /// </summary>
        public static string TableLockingScript {
            get {
                return ResourceManager.GetString("TableLockingScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        public static byte[] TarnishedSchema {
            get {
                object obj = ResourceManager.GetObject("TarnishedSchema", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
        ///&lt;SqlSyncBuildData xmlns=&quot;http://INVALID.mckechney.com/SqlSyncBuildProject.xsd&quot;&gt;
        ///  &lt;SqlSyncBuildProject ProjectName=&quot;&quot; ScriptTagRequired=&quot;false&quot;&gt;
        ///    &lt;Scripts&gt;
        ///      &lt;Script FileName=&quot;Create table.sql&quot; BuildOrder=&quot;3&quot; Description=&quot;&quot; RollBackOnError=&quot;true&quot; CausesBuildFailure=&quot;true&quot; DateAdded=&quot;2008-06-26T14:28:15.2685768-04:00&quot; ScriptId=&quot;bd58d42b-51f9-4052-85c8-44f247a690f4&quot; Database=&quot;Client&quot; StripTransactionText=&quot;true&quot; AllowMultipleRuns=&quot;true&quot; AddedBy=&quot;mmckechn&quot; Scrip [rest of string was truncated]&quot;;.
        /// </summary>
        public static string XmlWithInvalidNamespace {
            get {
                return ResourceManager.GetString("XmlWithInvalidNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; standalone=&quot;yes&quot;?&gt;
        ///&lt;SqlSyncBuildData&gt;
        ///  &lt;SqlSyncBuildProject ProjectName=&quot;&quot; ScriptTagRequired=&quot;false&quot;&gt;
        ///    &lt;Scripts&gt;
        ///      &lt;Script FileName=&quot;Create table.sql&quot; BuildOrder=&quot;3&quot; Description=&quot;&quot; RollBackOnError=&quot;true&quot; CausesBuildFailure=&quot;true&quot; DateAdded=&quot;2008-06-26T14:28:15.2685768-04:00&quot; ScriptId=&quot;bd58d42b-51f9-4052-85c8-44f247a690f4&quot; Database=&quot;Client&quot; StripTransactionText=&quot;true&quot; AllowMultipleRuns=&quot;true&quot; AddedBy=&quot;mmckechn&quot; ScriptTimeOut=&quot;20&quot; DateModified=&quot;2008-08-27T12:53:18.9312747-04:00 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string XmlWithNoNamespace {
            get {
                return ResourceManager.GetString("XmlWithNoNamespace", resourceCulture);
            }
        }
    }
}
