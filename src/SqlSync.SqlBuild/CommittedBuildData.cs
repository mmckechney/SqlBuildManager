// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 3.4.0.2645 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.SqlBuild {
    using System;
    using System.Data;
    using System.Xml;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignerCategory("Component")]
    [System.ComponentModel.DesignTimeVisible(true)]
    public class CommittedBuildData {
        
        private string _BuildFileName = String.Empty;
        
        private int _ScriptCount;
        
        private System.DateTime _CommitDate;
        
        private string _Database;
        
        private System.Collections.Hashtable _validationDict;
        
        public CommittedBuildData() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("BuildFileName", false);
            this._validationDict.Add("ScriptCount", false);
            this._validationDict.Add("CommitDate", false);
            this._validationDict.Add("Database", false);
        }
        
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        public virtual string BuildFileName {
            get {
                return this._BuildFileName;
            }
            set {
                this._BuildFileName = value;
                this._validationDict["BuildFileName"] = true;
            }
        }
        
        public virtual int ScriptCount {
            get {
                return this._ScriptCount;
            }
            set {
                this._ScriptCount = value;
                this._validationDict["ScriptCount"] = true;
            }
        }
        
        public virtual System.DateTime CommitDate {
            get {
                return this._CommitDate;
            }
            set {
                this._CommitDate = value;
                this._validationDict["CommitDate"] = true;
            }
        }
        
        public virtual string Database {
            get {
                return this._Database;
            }
            set {
                this._Database = value;
                this._validationDict["Database"] = true;
            }
        }
        
        public virtual string StrBuildFileName {
            get {
                return this._BuildFileName.ToString();
            }
        }
        
        public virtual string StrScriptCount {
            get {
                return this._ScriptCount.ToString();
            }
        }
        
        public virtual string StrCommitDate {
            get {
                return this._CommitDate.ToString();
            }
        }
        
        public virtual string StrDatabase {
            get {
                return this._Database.ToString();
            }
        }
        
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StrBuildFileName);
                sb.Append(delimiter);
                sb.Append(this.StrScriptCount);
                sb.Append(delimiter);
                sb.Append(this.StrCommitDate);
                sb.Append(delimiter);
                sb.Append(this.StrDatabase);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        public virtual bool Fill(CommittedBuildData dataClass) {
            try {
                this.BuildFileName = dataClass.BuildFileName;
                this.ScriptCount = dataClass.ScriptCount;
                this.CommitDate = dataClass.CommitDate;
                this.Database = dataClass.Database;
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.Fill(CommittedBuildData) Method", ex);
            }
        }
        
        public virtual bool Fill(Microsoft.Data.SqlClient.SqlDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    if ((reader["BuildFileName"].Equals(System.DBNull.Value) == false)) {
                        this.BuildFileName = ((string)(System.Convert.ChangeType(reader["BuildFileName"], typeof(string))));
                    }
                    if ((reader["ScriptCount"].Equals(System.DBNull.Value) == false)) {
                        this.ScriptCount = ((int)(System.Convert.ChangeType(reader["ScriptCount"], typeof(int))));
                    }
                    if ((reader["commitDate"].Equals(System.DBNull.Value) == false)) {
                        this.CommitDate = ((System.DateTime)(System.Convert.ChangeType(reader["commitDate"], typeof(System.DateTime))));
                    }
                    if ((reader["database"].Equals(System.DBNull.Value) == false)) {
                        this.Database = ((string)(System.Convert.ChangeType(reader["database"], typeof(string))));
                    }
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection nameValueColl) {
            try {
                if ((nameValueColl.GetValues("BuildFileName") != null)) {
                    this.BuildFileName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("BuildFileName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("ScriptCount") != null)) {
                    this.ScriptCount = ((int)(System.Convert.ChangeType(nameValueColl.GetValues("ScriptCount")[0], typeof(int))));
                }
                if ((nameValueColl.GetValues("CommitDate") != null)) {
                    this.CommitDate = ((System.DateTime)(System.Convert.ChangeType(nameValueColl.GetValues("CommitDate")[0], typeof(System.DateTime))));
                }
                if ((nameValueColl.GetValues("Database") != null)) {
                    this.Database = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("Database")[0], typeof(string))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.Fill(NameValueCollection) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.BuildFileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(string))));
                this.ScriptCount = ((int)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(int))));
                this.CommitDate = ((System.DateTime)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(System.DateTime))));
                this.Database = ((string)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(string))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.Fill(System.Array) Method", ex);
            }
        }
        
        public virtual bool Fill(string delimString, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimString.Split(delimiter);
            try {
                this.BuildFileName = ((string)(System.Convert.ChangeType(arrSplitString[0], typeof(string))));
                this.ScriptCount = ((int)(System.Convert.ChangeType(arrSplitString[1], typeof(int))));
                this.CommitDate = ((System.DateTime)(System.Convert.ChangeType(arrSplitString[2], typeof(System.DateTime))));
                this.Database = ((string)(System.Convert.ChangeType(arrSplitString[3], typeof(string))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.Fill(string,char) Method", ex);
            }
        }
        
        public virtual bool Fill(string fixedString) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.Fill(string) Method", ex);
            }
        }
        
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.BuildFileName.ToString());
                sb.Append(delimiter);
                sb.Append(this.ScriptCount.ToString());
                sb.Append(delimiter);
                sb.Append(this.CommitDate.ToString());
                sb.Append(delimiter);
                sb.Append(this.Database.ToString());
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.GetDelimitedString(string) Method", ex);
            }
        }
        
        public virtual string[] GetStringArray() {
            string[] myArray = new string[4];
            try {
                myArray[0] = this._BuildFileName.ToString();
                myArray[1] = this._ScriptCount.ToString();
                myArray[2] = this._CommitDate.ToString();
                myArray[3] = this._Database.ToString();
                return myArray;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.GetStringArray() Method", ex);
            }
        }
        
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("BuildFileName", this.BuildFileName.ToString());
                nameValueColl.Add("ScriptCount", this.ScriptCount.ToString());
                nameValueColl.Add("CommitDate", this.CommitDate.ToString());
                nameValueColl.Add("Database", this.Database.ToString());
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CommittedBuildData.GetNameValueCollection() Method", ex);
            }
        }
        
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["BuildFileName"], typeof(bool)))) == false)) {
                missingValues.Add("BuildFileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ScriptCount"], typeof(bool)))) == false)) {
                missingValues.Add("ScriptCount");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["CommitDate"], typeof(bool)))) == false)) {
                missingValues.Add("CommitDate");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Database"], typeof(bool)))) == false)) {
                missingValues.Add("Database");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
