// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 3.4.1.16443 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.SqlBuild {
    using System;
    using System.Data;
    using System.Xml;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignerCategory("Component")]
    [System.ComponentModel.DesignTimeVisible(true)]
    public class BuildConnectData {
        
        private Microsoft.Data.SqlClient.SqlConnection _Connection = null;
        
        private Microsoft.Data.SqlClient.SqlTransaction _Transaction = null;
        
        private string _DatabaseName = String.Empty;
        
        private string _ServerName = String.Empty;
        
        private bool _HasLoggingTable = false;
        
        private System.Collections.Hashtable _validationDict;
        
        public BuildConnectData() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("Connection", false);
            this._validationDict.Add("Transaction", false);
            this._validationDict.Add("DatabaseName", false);
            this._validationDict.Add("ServerName", false);
            this._validationDict.Add("HasLoggingTable", false);
        }
        
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        public virtual Microsoft.Data.SqlClient.SqlConnection Connection {
            get {
                return this._Connection;
            }
            set {
                this._Connection = value;
                this._validationDict["Connection"] = true;
            }
        }
        
        public virtual Microsoft.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._Transaction;
            }
            set {
                this._Transaction = value;
                this._validationDict["Transaction"] = true;
            }
        }
        
        public virtual string DatabaseName {
            get {
                return this._DatabaseName;
            }
            set {
                this._DatabaseName = value;
                this._validationDict["DatabaseName"] = true;
            }
        }
        
        public virtual string ServerName {
            get {
                return this._ServerName;
            }
            set {
                this._ServerName = value;
                this._validationDict["ServerName"] = true;
            }
        }
        
        public virtual bool HasLoggingTable {
            get {
                return this._HasLoggingTable;
            }
            set {
                this._HasLoggingTable = value;
                this._validationDict["HasLoggingTable"] = true;
            }
        }
        
        public virtual string StrConnection {
            get {
                return this._Connection.ToString();
            }
        }
        
        public virtual string StrTransaction {
            get {
                return this._Transaction.ToString();
            }
        }
        
        public virtual string StrDatabaseName {
            get {
                return this._DatabaseName.ToString();
            }
        }
        
        public virtual string StrServerName {
            get {
                return this._ServerName.ToString();
            }
        }
        
        public virtual string StrHasLoggingTable {
            get {
                return this._HasLoggingTable.ToString();
            }
        }
        
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StrConnection);
                sb.Append(delimiter);
                sb.Append(this.StrTransaction);
                sb.Append(delimiter);
                sb.Append(this.StrDatabaseName);
                sb.Append(delimiter);
                sb.Append(this.StrServerName);
                sb.Append(delimiter);
                sb.Append(this.StrHasLoggingTable);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        public virtual bool Fill(BuildConnectData dataClass) {
            try {
                this.Connection = dataClass.Connection;
                this.Transaction = dataClass.Transaction;
                this.DatabaseName = dataClass.DatabaseName;
                this.ServerName = dataClass.ServerName;
                this.HasLoggingTable = dataClass.HasLoggingTable;
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(BuildConnectData) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Data.SqlClient.SqlDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        public virtual bool Fill(System.Data.DataRow sourceDataRow) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(System.Data.DataRow sourceDataRow) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection nameValueColl) {
            try {
                if ((nameValueColl.GetValues("Connection") != null)) {
                    this.Connection = ((Microsoft.Data.SqlClient.SqlConnection)(System.Convert.ChangeType(nameValueColl.GetValues("Connection")[0], typeof(Microsoft.Data.SqlClient.SqlConnection))));
                }
                if ((nameValueColl.GetValues("Transaction") != null)) {
                    this.Transaction = ((Microsoft.Data.SqlClient.SqlTransaction)(System.Convert.ChangeType(nameValueColl.GetValues("Transaction")[0], typeof(Microsoft.Data.SqlClient.SqlTransaction))));
                }
                if ((nameValueColl.GetValues("DatabaseName") != null)) {
                    this.DatabaseName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("DatabaseName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("ServerName") != null)) {
                    this.ServerName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("ServerName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("HasLoggingTable") != null)) {
                    this.HasLoggingTable = ((bool)(System.Convert.ChangeType(nameValueColl.GetValues("HasLoggingTable")[0], typeof(bool))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(NameValueCollection) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.Connection = ((Microsoft.Data.SqlClient.SqlConnection)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(Microsoft.Data.SqlClient.SqlConnection))));
                this.Transaction = ((Microsoft.Data.SqlClient.SqlTransaction)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(Microsoft.Data.SqlClient.SqlTransaction))));
                this.DatabaseName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(string))));
                this.ServerName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(string))));
                this.HasLoggingTable = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(4), typeof(bool))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(System.Array) Method", ex);
            }
        }
        
        public virtual bool Fill(string delimString, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimString.Split(delimiter);
            try {
                this.Connection = ((Microsoft.Data.SqlClient.SqlConnection)(System.Convert.ChangeType(arrSplitString[0], typeof(Microsoft.Data.SqlClient.SqlConnection))));
                this.Transaction = ((Microsoft.Data.SqlClient.SqlTransaction)(System.Convert.ChangeType(arrSplitString[1], typeof(Microsoft.Data.SqlClient.SqlTransaction))));
                this.DatabaseName = ((string)(System.Convert.ChangeType(arrSplitString[2], typeof(string))));
                this.ServerName = ((string)(System.Convert.ChangeType(arrSplitString[3], typeof(string))));
                this.HasLoggingTable = ((bool)(System.Convert.ChangeType(arrSplitString[4], typeof(bool))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(string,char) Method", ex);
            }
        }
        
        public virtual bool Fill(string fixedString) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.Fill(string) Method", ex);
            }
        }
        
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.Connection.ToString());
                sb.Append(delimiter);
                sb.Append(this.Transaction.ToString());
                sb.Append(delimiter);
                sb.Append(this.DatabaseName.ToString());
                sb.Append(delimiter);
                sb.Append(this.ServerName.ToString());
                sb.Append(delimiter);
                sb.Append(this.HasLoggingTable.ToString());
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.GetDelimitedString(string) Method", ex);
            }
        }
        
        public virtual string[] GetStringArray() {
            string[] myArray = new string[5];
            try {
                myArray[0] = this._Connection.ToString();
                myArray[1] = this._Transaction.ToString();
                myArray[2] = this._DatabaseName.ToString();
                myArray[3] = this._ServerName.ToString();
                myArray[4] = this._HasLoggingTable.ToString();
                return myArray;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.GetStringArray() Method", ex);
            }
        }
        
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("Connection", this.Connection.ToString());
                nameValueColl.Add("Transaction", this.Transaction.ToString());
                nameValueColl.Add("DatabaseName", this.DatabaseName.ToString());
                nameValueColl.Add("ServerName", this.ServerName.ToString());
                nameValueColl.Add("HasLoggingTable", this.HasLoggingTable.ToString());
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: BuildConnectData.GetNameValueCollection() Method", ex);
            }
        }
        
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Connection"], typeof(bool)))) == false)) {
                missingValues.Add("Connection");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Transaction"], typeof(bool)))) == false)) {
                missingValues.Add("Transaction");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["DatabaseName"], typeof(bool)))) == false)) {
                missingValues.Add("DatabaseName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ServerName"], typeof(bool)))) == false)) {
                missingValues.Add("ServerName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["HasLoggingTable"], typeof(bool)))) == false)) {
                missingValues.Add("HasLoggingTable");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
