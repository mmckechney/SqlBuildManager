//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a the TypedDataTableBuilder tool.
//     (TypedDataTableBuilder  -- Michael McKechney, author)
//		
//     Visual Studio .NET Custom Tool Setting: TypedTableBuilder
//	   Version: 3.1.1.17609
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// <autogenerated>
//------------------------------------------------------------------------------


namespace SqlSync.SqlBuild
{

	using System;
	using System.Data;
	using System.Runtime.Serialization;
	using System.Drawing;

	[Serializable()]
	[System.ComponentModel.ToolboxItem(true)]
	[System.ComponentModel.DesignerCategory("Component")]
	[System.ComponentModel.DesignTimeVisible(true)]
	public class ScriptRunLog : DataTable, System.Collections.IEnumerable
	{
	
	
		private DataColumn columnBuildFileName;
		private DataColumn columnScriptFileName;
		private DataColumn columnScriptId;
		private DataColumn columnScriptFileHash;
		private DataColumn columnCommitDate;
		private DataColumn columnSequence;
		private DataColumn columnUserId;
		private DataColumn columnAllowScriptBlock;
		private DataColumn columnAllowBlockUpdateId;
		private DataColumn columnScriptText;
		private DataColumn columnTag;
		public  ScriptRunLog(): base("ScriptRunLog")
		{
			this.InitClass();
			this.InitVars();
			this.ColumnChanged += new DataColumnChangeEventHandler( myColumn_Changed );
		}
		public ScriptRunLog(DataTable table): base(table.TableName)
		{
			this.CaseSensitive = table.CaseSensitive;
			this.Locale = table.Locale;
			this.Namespace = table.Namespace;
			this.Prefix = table.Prefix;
			this.MinimumCapacity = table.MinimumCapacity;
			this.DisplayExpression = table.DisplayExpression;
			this.InitClass();
			this.InitVars();
			this.ColumnChanged += new DataColumnChangeEventHandler( myColumn_Changed );
			foreach(DataRow tmpRow in table.Rows)
			{
				this.ImportRow(tmpRow);
			}
		}
		public ScriptRunLog(SerializationInfo info, StreamingContext context):base(info,context)
		{
			this.InitVars();
			this.ColumnChanged += new DataColumnChangeEventHandler( myColumn_Changed );
		}
	
		private void myColumn_Changed( object sender, DataColumnChangeEventArgs e )
		{
			this.InitVars();
		}
		public int Count
		{
			get
			{
				return this.Rows.Count;
			}

		}
		public DataColumn BuildFileNameColumn
		{
			get
			{
				return this.columnBuildFileName;
			}

		}
		public DataColumn ScriptFileNameColumn
		{
			get
			{
				return this.columnScriptFileName;
			}

		}
		public DataColumn ScriptIdColumn
		{
			get
			{
				return this.columnScriptId;
			}

		}
		public DataColumn ScriptFileHashColumn
		{
			get
			{
				return this.columnScriptFileHash;
			}

		}
		public DataColumn CommitDateColumn
		{
			get
			{
				return this.columnCommitDate;
			}

		}
		public DataColumn SequenceColumn
		{
			get
			{
				return this.columnSequence;
			}

		}
		public DataColumn UserIdColumn
		{
			get
			{
				return this.columnUserId;
			}

		}
		public DataColumn AllowScriptBlockColumn
		{
			get
			{
				return this.columnAllowScriptBlock;
			}

		}
		public DataColumn AllowBlockUpdateIdColumn
		{
			get
			{
				return this.columnAllowBlockUpdateId;
			}

		}
		public DataColumn ScriptTextColumn
		{
			get
			{
				return this.columnScriptText;
			}

		}
		public DataColumn TagColumn
		{
			get
			{
				return this.columnTag;
			}

		}
		
		public ScriptRunLogRow this[int index]
		{
			get
			{
				return ((ScriptRunLogRow)(this.Rows[index]));
			}

		}
		public ScriptRunLogRow NewScriptRunLogRow()
		{
			return ((ScriptRunLogRow)(this.NewRow()));
		}

		public void AddScriptRunLogRow(ScriptRunLogRow row)
		{
			this.Rows.Add(row);
		}
		public bool AddScriptRunLogRow(string BuildFileName,string ScriptFileName,System.Guid ScriptId,string ScriptFileHash,DateTime CommitDate,int Sequence,string UserId,bool AllowScriptBlock,string AllowBlockUpdateId,string ScriptText,string Tag)
		{
			ScriptRunLogRow newRow = (ScriptRunLogRow)this.NewRow();
			try
			{	
				newRow.BuildFileName = BuildFileName;
				newRow.ScriptFileName = ScriptFileName;
				newRow.ScriptId = ScriptId;
				newRow.ScriptFileHash = ScriptFileHash;
				newRow.CommitDate = CommitDate;
				newRow.Sequence = Sequence;
				newRow.UserId = UserId;
				newRow.AllowScriptBlock = AllowScriptBlock;
				newRow.AllowBlockUpdateId = AllowBlockUpdateId;
				newRow.ScriptText = ScriptText;
				newRow.Tag = Tag;
				this.Rows.Add(newRow);
			}catch(Exception e)
			{
				throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLog.AddScriptRunLogRow(string,string,System.Guid,string,DateTime,int,string,bool,string,string,string) Method",e);
			}
			return true;
			
		}
		
		protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
		{
			return new ScriptRunLogRow(builder);
		}
		public void RemoveScriptRunLogRow(ScriptRunLogRow row)
		{
			this.Rows.Remove(row);
		}
		protected override DataTable CreateInstance()
		{
			return new ScriptRunLog();
		}
		
		
		
		public System.Collections.IEnumerator GetEnumerator()
		{
			return this.Rows.GetEnumerator();
		}
		public override DataTable Clone() 
		{
			ScriptRunLog cln = ((ScriptRunLog)(base.Clone()));
			cln.InitVars();
			return cln;
		}
		internal void InitVars()
		{
			
			this.columnBuildFileName=this.Columns["BuildFileName"];
			
			this.columnScriptFileName=this.Columns["ScriptFileName"];
			
			this.columnScriptId=this.Columns["ScriptId"];
			
			this.columnScriptFileHash=this.Columns["ScriptFileHash"];
			
			this.columnCommitDate=this.Columns["CommitDate"];
			
			this.columnSequence=this.Columns["Sequence"];
			
			this.columnUserId=this.Columns["UserId"];
			
			this.columnAllowScriptBlock=this.Columns["AllowScriptBlock"];
			
			this.columnAllowBlockUpdateId=this.Columns["AllowBlockUpdateId"];
			
			this.columnScriptText=this.Columns["ScriptText"];
			
			this.columnTag=this.Columns["Tag"];
			
		}
		private  void InitClass()
		{
		
			this.columnBuildFileName = new DataColumn("BuildFileName", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnBuildFileName);
		
			this.columnScriptFileName = new DataColumn("ScriptFileName", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnScriptFileName);
		
			this.columnScriptId = new DataColumn("ScriptId", typeof(System.Guid), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnScriptId);
		
			this.columnScriptFileHash = new DataColumn("ScriptFileHash", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnScriptFileHash);
		
			this.columnCommitDate = new DataColumn("CommitDate", typeof(DateTime), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnCommitDate);
		
			this.columnSequence = new DataColumn("Sequence", typeof(int), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnSequence);
		
			this.columnUserId = new DataColumn("UserId", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnUserId);
		
			this.columnAllowScriptBlock = new DataColumn("AllowScriptBlock", typeof(bool), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnAllowScriptBlock);
		
			this.columnAllowBlockUpdateId = new DataColumn("AllowBlockUpdateId", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnAllowBlockUpdateId);
		
			this.columnScriptText = new DataColumn("ScriptText", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnScriptText);
		
			this.columnTag = new DataColumn("Tag", typeof(string), null, System.Data.MappingType.Element);
			this.Columns.Add(this.columnTag);
		
		
		
		}

		public DataTable SelectDistinct(string FieldName)
		{	
			string[] FieldNames = new String[]{FieldName};
			return SelectDistinct(FieldNames);
		}

		public DataTable SelectDistinct(string[] FieldNames)
		{	
			bool missMatch = false;
			DataTable dt = new DataTable("distinct_values");
			string fieldNameList = "";
			for(int i=0;i<FieldNames.Length;i++)
			{
				fieldNameList += FieldNames[i];
				if(i!= FieldNames.Length-1)
					fieldNameList += ",";
			}
			
			for(int i=0;i<FieldNames.Length;i++)
			{
				dt.Columns.Add(FieldNames[i], this.Columns[FieldNames[i]].DataType);
			}
			
			object[] LastValue = new object[FieldNames.Length];
			
			foreach (DataRow dr in this.Select("", fieldNameList))
			{
				for(int i=0;i<FieldNames.Length;i++)
				{
					if (  LastValue[i] == null || !(ColumnEqual(LastValue[i], dr[FieldNames[i]])) ) 
					{
						missMatch = true;
						for(int j=0;j<FieldNames.Length;j++)
						{
							LastValue[j] = dr[FieldNames[j]]; 
						}
						break;
					}
				}

				if(missMatch)
				{
					DataRow tmpRow = dt.NewRow();
					for(int i=0;i<FieldNames.Length;i++)
					{
						tmpRow[FieldNames[i]] = LastValue[i];
					}
					dt.Rows.Add(tmpRow);
					missMatch = false;
				}
			}
			return dt;
		}
		
		
		public DataTable SelectDistinct(DataColumn[] DistinctColumns)
		{
			bool missMatch = false;
			DataTable dt = new DataTable("distinct_values");
			string fieldNameList = "";
			for(int i=0;i<DistinctColumns.Length;i++)
			{
				fieldNameList += DistinctColumns[i].ColumnName;
				if(i!= DistinctColumns.Length-1)
					fieldNameList += ",";
			}
			
			for(int i=0;i<DistinctColumns.Length;i++)
			{
				dt.Columns.Add(DistinctColumns[i].ColumnName,DistinctColumns[i].DataType);
			}
			
			object[] LastValue = new object[DistinctColumns.Length];
			
			foreach (DataRow dr in this.Select("", fieldNameList))
			{
				for(int i=0;i<DistinctColumns.Length;i++)
				{
					if (  LastValue[i] == null || !(ColumnEqual(LastValue[i], dr[DistinctColumns[i]])) ) 
					{
						missMatch = true;
						for(int j=0;j<DistinctColumns.Length;j++)
						{
							LastValue[j] = dr[DistinctColumns[j]]; 
						}
						break;
					}
				}
				if(missMatch)
				{
					DataRow tmpRow = dt.NewRow();
					for(int i=0;i<DistinctColumns.Length;i++)
					{
						tmpRow[DistinctColumns[i].ColumnName] = LastValue[i];
					}
					dt.Rows.Add(tmpRow);
					missMatch = false;
				}
			}
			return dt;
		}

		public DataTable SelectDistinct(DataColumn DistinctColumn)
		{
			DataColumn[] DistinctColumns = new DataColumn[]{DistinctColumn};
			return SelectDistinct(DistinctColumns);
		}


		private bool ColumnEqual(object A, object B)
		{
			if (A == System.DBNull.Value && B == System.DBNull.Value)
				 return true; 
			if ( A == System.DBNull.Value || B == System.DBNull.Value ) 
				return false; 
			return ( A.Equals(B) );  
		}


		public bool ImportRows(DataRow[] SourceRows)
		{
			bool importError = false;
			for(int i=0;i<SourceRows.Length;i++)
			{
				try
				{
					this.ImportRow(SourceRows[i]);
				}
				catch(Exception e)
				{
					importError = true;
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLog.ImportRows(DataRow[]) Method",e);
				}					
				
				
			}
			return importError;
		}
		
		public bool ImportRows( ScriptRunLogRow[] SourceRows)
		{
			bool importError = false;
			for(int i=0;i<SourceRows.Length;i++)
			{
				try
				{
					this.ImportRow( (DataRow)SourceRows[i]);
				}
				catch(Exception e)
				{
					importError = true;
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLog.ImportRows(ScriptRunLogRow[]) Method",e);
				}					

				
			}
			return importError;
		}
		
		
		//private Exception myLastException;
		//public Exception GetLastException()
		//{
		//	return myLastException;
		//}
		
		public new System.Data.DataRowCollection Rows
		{
			get
			{
				return base.Rows;
			}
		
		}
		
		public virtual bool Fill(string fixedString)
		{
		
		ScriptRunLogRow newRow = (ScriptRunLogRow)this.NewRow();
			try
			{	
				this.Rows.Add(newRow);
			}
			catch(Exception e)
			{
				throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLog.Fill(string) Method",e);
			}
			return true;
		
		}

	}
	public class ScriptRunLogRow : DataRow 
	{
		private ScriptRunLog tableScriptRunLog;
		internal ScriptRunLogRow(DataRowBuilder rb) : base(rb)
		{
			this.tableScriptRunLog = ((ScriptRunLog)(this.Table));
		}
		
		public string BuildFileName
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.BuildFileNameColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.BuildFileName property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.BuildFileNameColumn] = value;
			}
		}
		
		public string ScriptFileName
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.ScriptFileNameColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.ScriptFileName property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.ScriptFileNameColumn] = value;
			}
		}
		
		public System.Guid ScriptId
		{
			get
			{
				try
				{
					return ((System.Guid)(this[this.tableScriptRunLog.ScriptIdColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.ScriptId property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.ScriptIdColumn] = value;
			}
		}
		
		public string ScriptFileHash
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.ScriptFileHashColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.ScriptFileHash property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.ScriptFileHashColumn] = value;
			}
		}
		
		public DateTime CommitDate
		{
			get
			{
				try
				{
					return ((DateTime)(this[this.tableScriptRunLog.CommitDateColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.CommitDate property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.CommitDateColumn] = value;
			}
		}
		
		public int Sequence
		{
			get
			{
				try
				{
					return ((int)(this[this.tableScriptRunLog.SequenceColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.Sequence property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.SequenceColumn] = value;
			}
		}
		
		public string UserId
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.UserIdColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.UserId property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.UserIdColumn] = value;
			}
		}
		
		public bool AllowScriptBlock
		{
			get
			{
				try
				{
					return ((bool)(this[this.tableScriptRunLog.AllowScriptBlockColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.AllowScriptBlock property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.AllowScriptBlockColumn] = value;
			}
		}
		
		public string AllowBlockUpdateId
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.AllowBlockUpdateIdColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.AllowBlockUpdateId property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.AllowBlockUpdateIdColumn] = value;
			}
		}
		
		public string ScriptText
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.ScriptTextColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.ScriptText property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.ScriptTextColumn] = value;
			}
		}
		
		public string Tag
		{
			get
			{
				try
				{
					return ((string)(this[this.tableScriptRunLog.TagColumn]));
				}
				catch(InvalidCastException e)
				{
					throw new System.ApplicationException("Error in Auto-Generated: ScriptRunLogRow.Tag property. Underlying value is System.DbNull",e);
				}
			}
			set
			{
				this[this.tableScriptRunLog.TagColumn] = value;
			}
		}
		
		public bool SyncRowValues(DataRow SourceRow)
		{
			bool syncErrors = false;
			
			try
			{
				this[this.tableScriptRunLog.BuildFileNameColumn] = SourceRow["BuildFileName"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.ScriptFileNameColumn] = SourceRow["ScriptFileName"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.ScriptIdColumn] = SourceRow["ScriptId"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.ScriptFileHashColumn] = SourceRow["ScriptFileHash"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.CommitDateColumn] = SourceRow["CommitDate"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.SequenceColumn] = SourceRow["Sequence"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.UserIdColumn] = SourceRow["UserId"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.AllowScriptBlockColumn] = SourceRow["AllowScriptBlock"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.AllowBlockUpdateIdColumn] = SourceRow["AllowBlockUpdateId"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.ScriptTextColumn] = SourceRow["ScriptText"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			try
			{
				this[this.tableScriptRunLog.TagColumn] = SourceRow["Tag"];
			}
			catch(Exception e)
			{
				syncErrors = true;
				throw new System.ApplicationException("Error in Auto-Generated: SyncRowValues(DataRow) Method",e);
			}
			
			return syncErrors;
		
		}
		
		public bool SyncRowValues(ScriptRunLogRow SourceRow)
		{
			return SyncRowValues( (DataRow)SourceRow);
		}
	}

}