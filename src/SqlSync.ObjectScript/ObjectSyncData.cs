// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 3.4.1.16443 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.ObjectScript {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignerCategory("Component")]
    [System.ComponentModel.DesignTimeVisible(true)]
    public class ObjectSyncData {
        
        private string _ObjectName = string.Empty;
        
        private string _ObjectType = string.Empty;
        
        private string _FullPath = string.Empty;
        
        private bool _IsInDatabase = false;
        
        private bool _IsInFileSystem = false;
        
        private string _FileName = string.Empty;
        
        private string _SchemaOwner = string.Empty;
        
        private System.Collections.Hashtable _validationDict;
        
        public ObjectSyncData() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("ObjectName", false);
            this._validationDict.Add("ObjectType", false);
            this._validationDict.Add("FullPath", false);
            this._validationDict.Add("IsInDatabase", false);
            this._validationDict.Add("IsInFileSystem", false);
            this._validationDict.Add("FileName", false);
            this._validationDict.Add("SchemaOwner", false);
        }
        
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        public virtual string ObjectName {
            get {
                return this._ObjectName;
            }
            set {
                this._ObjectName = value;
                this._validationDict["ObjectName"] = true;
            }
        }
        
        public virtual string ObjectType {
            get {
                return this._ObjectType;
            }
            set {
                this._ObjectType = value;
                this._validationDict["ObjectType"] = true;
            }
        }
        
        public virtual string FullPath {
            get {
                return this._FullPath;
            }
            set {
                this._FullPath = value;
                this._validationDict["FullPath"] = true;
            }
        }
        
        public virtual bool IsInDatabase {
            get {
                return this._IsInDatabase;
            }
            set {
                this._IsInDatabase = value;
                this._validationDict["IsInDatabase"] = true;
            }
        }
        
        public virtual bool IsInFileSystem {
            get {
                return this._IsInFileSystem;
            }
            set {
                this._IsInFileSystem = value;
                this._validationDict["IsInFileSystem"] = true;
            }
        }
        
        public virtual string FileName {
            get {
                return this._FileName;
            }
            set {
                this._FileName = value;
                this._validationDict["FileName"] = true;
            }
        }
        
        public virtual string SchemaOwner {
            get {
                return this._SchemaOwner;
            }
            set {
                this._SchemaOwner = value;
                this._validationDict["SchemaOwner"] = true;
            }
        }
        
        public virtual string StrObjectName {
            get {
                return this._ObjectName.ToString();
            }
        }
        
        public virtual string StrObjectType {
            get {
                return this._ObjectType.ToString();
            }
        }
        
        public virtual string StrFullPath {
            get {
                return this._FullPath.ToString();
            }
        }
        
        public virtual string StrIsInDatabase {
            get {
                return this._IsInDatabase.ToString();
            }
        }
        
        public virtual string StrIsInFileSystem {
            get {
                return this._IsInFileSystem.ToString();
            }
        }
        
        public virtual string StrFileName {
            get {
                return this._FileName.ToString();
            }
        }
        
        public virtual string StrSchemaOwner {
            get {
                return this._SchemaOwner.ToString();
            }
        }
        
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StrObjectName);
                sb.Append(delimiter);
                sb.Append(this.StrObjectType);
                sb.Append(delimiter);
                sb.Append(this.StrFullPath);
                sb.Append(delimiter);
                sb.Append(this.StrIsInDatabase);
                sb.Append(delimiter);
                sb.Append(this.StrIsInFileSystem);
                sb.Append(delimiter);
                sb.Append(this.StrFileName);
                sb.Append(delimiter);
                sb.Append(this.StrSchemaOwner);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        public virtual bool Fill(ObjectSyncData dataClass) {
            try {
                this.ObjectName = dataClass.ObjectName;
                this.ObjectType = dataClass.ObjectType;
                this.FullPath = dataClass.FullPath;
                this.IsInDatabase = dataClass.IsInDatabase;
                this.IsInFileSystem = dataClass.IsInFileSystem;
                this.FileName = dataClass.FileName;
                this.SchemaOwner = dataClass.SchemaOwner;
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(ObjectSyncData) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Data.SqlClient.SqlDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        public virtual bool Fill(System.Data.DataRow sourceDataRow) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(System.Data.DataRow sourceDataRow) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection nameValueColl) {
            try {
                if ((nameValueColl.GetValues("ObjectName") != null)) {
                    this.ObjectName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("ObjectName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("ObjectType") != null)) {
                    this.ObjectType = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("ObjectType")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("FullPath") != null)) {
                    this.FullPath = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("FullPath")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("IsInDatabase") != null)) {
                    this.IsInDatabase = ((bool)(System.Convert.ChangeType(nameValueColl.GetValues("IsInDatabase")[0], typeof(bool))));
                }
                if ((nameValueColl.GetValues("IsInFileSystem") != null)) {
                    this.IsInFileSystem = ((bool)(System.Convert.ChangeType(nameValueColl.GetValues("IsInFileSystem")[0], typeof(bool))));
                }
                if ((nameValueColl.GetValues("FileName") != null)) {
                    this.FileName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("FileName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("SchemaOwner") != null)) {
                    this.SchemaOwner = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("SchemaOwner")[0], typeof(string))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(NameValueCollection) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.ObjectName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(string))));
                this.ObjectType = ((string)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(string))));
                this.FullPath = ((string)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(string))));
                this.IsInDatabase = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(bool))));
                this.IsInFileSystem = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(4), typeof(bool))));
                this.FileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(5), typeof(string))));
                this.SchemaOwner = ((string)(System.Convert.ChangeType(sourceArray.GetValue(6), typeof(string))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(System.Array) Method", ex);
            }
        }
        
        public virtual bool Fill(string delimString, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimString.Split(delimiter);
            try {
                this.ObjectName = ((string)(System.Convert.ChangeType(arrSplitString[0], typeof(string))));
                this.ObjectType = ((string)(System.Convert.ChangeType(arrSplitString[1], typeof(string))));
                this.FullPath = ((string)(System.Convert.ChangeType(arrSplitString[2], typeof(string))));
                this.IsInDatabase = ((bool)(System.Convert.ChangeType(arrSplitString[3], typeof(bool))));
                this.IsInFileSystem = ((bool)(System.Convert.ChangeType(arrSplitString[4], typeof(bool))));
                this.FileName = ((string)(System.Convert.ChangeType(arrSplitString[5], typeof(string))));
                this.SchemaOwner = ((string)(System.Convert.ChangeType(arrSplitString[6], typeof(string))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(string,char) Method", ex);
            }
        }
        
        public virtual bool Fill(string fixedString) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.Fill(string) Method", ex);
            }
        }
        
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.ObjectName.ToString());
                sb.Append(delimiter);
                sb.Append(this.ObjectType.ToString());
                sb.Append(delimiter);
                sb.Append(this.FullPath.ToString());
                sb.Append(delimiter);
                sb.Append(this.IsInDatabase.ToString());
                sb.Append(delimiter);
                sb.Append(this.IsInFileSystem.ToString());
                sb.Append(delimiter);
                sb.Append(this.FileName.ToString());
                sb.Append(delimiter);
                sb.Append(this.SchemaOwner.ToString());
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.GetDelimitedString(string) Method", ex);
            }
        }
        
        public virtual string[] GetStringArray() {
            string[] myArray = new string[7];
            try {
                myArray[0] = this._ObjectName.ToString();
                myArray[1] = this._ObjectType.ToString();
                myArray[2] = this._FullPath.ToString();
                myArray[3] = this._IsInDatabase.ToString();
                myArray[4] = this._IsInFileSystem.ToString();
                myArray[5] = this._FileName.ToString();
                myArray[6] = this._SchemaOwner.ToString();
                return myArray;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.GetStringArray() Method", ex);
            }
        }
        
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("ObjectName", this.ObjectName.ToString());
                nameValueColl.Add("ObjectType", this.ObjectType.ToString());
                nameValueColl.Add("FullPath", this.FullPath.ToString());
                nameValueColl.Add("IsInDatabase", this.IsInDatabase.ToString());
                nameValueColl.Add("IsInFileSystem", this.IsInFileSystem.ToString());
                nameValueColl.Add("FileName", this.FileName.ToString());
                nameValueColl.Add("SchemaOwner", this.SchemaOwner.ToString());
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ObjectSyncData.GetNameValueCollection() Method", ex);
            }
        }
        
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ObjectName"], typeof(bool)))) == false)) {
                missingValues.Add("ObjectName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ObjectType"], typeof(bool)))) == false)) {
                missingValues.Add("ObjectType");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["FullPath"], typeof(bool)))) == false)) {
                missingValues.Add("FullPath");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["IsInDatabase"], typeof(bool)))) == false)) {
                missingValues.Add("IsInDatabase");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["IsInFileSystem"], typeof(bool)))) == false)) {
                missingValues.Add("IsInFileSystem");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["FileName"], typeof(bool)))) == false)) {
                missingValues.Add("FileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["SchemaOwner"], typeof(bool)))) == false)) {
                missingValues.Add("SchemaOwner");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
