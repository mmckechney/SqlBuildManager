// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 3.4.1.16443 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.DbInformation {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignerCategory("Component")]
    [System.ComponentModel.DesignTimeVisible(true)]
    public class CodeTableAudit {
        
        private string _TableName = string.Empty;
        
        private string _UpdateIdColumn = string.Empty;
        
        private string _UpdateDateColumn = string.Empty;
        
        private string _CreateDateColumn = string.Empty;
        
        private string _CreateIdColumn = string.Empty;
        
        private int _RowCount = -1;
        
        private bool _HasUpdateTrigger = false;
        
        private object _LookUpTableRow = null;
        
        private System.Collections.Hashtable _validationDict;
        
        public CodeTableAudit() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("TableName", false);
            this._validationDict.Add("UpdateIdColumn", false);
            this._validationDict.Add("UpdateDateColumn", false);
            this._validationDict.Add("CreateDateColumn", false);
            this._validationDict.Add("CreateIdColumn", false);
            this._validationDict.Add("RowCount", false);
            this._validationDict.Add("HasUpdateTrigger", false);
            this._validationDict.Add("LookUpTableRow", false);
        }
        
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        public virtual string TableName {
            get {
                return this._TableName;
            }
            set {
                this._TableName = value;
                this._validationDict["TableName"] = true;
            }
        }
        
        public virtual string UpdateIdColumn {
            get {
                return this._UpdateIdColumn;
            }
            set {
                this._UpdateIdColumn = value;
                this._validationDict["UpdateIdColumn"] = true;
            }
        }
        
        public virtual string UpdateDateColumn {
            get {
                return this._UpdateDateColumn;
            }
            set {
                this._UpdateDateColumn = value;
                this._validationDict["UpdateDateColumn"] = true;
            }
        }
        
        public virtual string CreateDateColumn {
            get {
                return this._CreateDateColumn;
            }
            set {
                this._CreateDateColumn = value;
                this._validationDict["CreateDateColumn"] = true;
            }
        }
        
        public virtual string CreateIdColumn {
            get {
                return this._CreateIdColumn;
            }
            set {
                this._CreateIdColumn = value;
                this._validationDict["CreateIdColumn"] = true;
            }
        }
        
        public virtual int RowCount {
            get {
                return this._RowCount;
            }
            set {
                this._RowCount = value;
                this._validationDict["RowCount"] = true;
            }
        }
        
        public virtual bool HasUpdateTrigger {
            get {
                return this._HasUpdateTrigger;
            }
            set {
                this._HasUpdateTrigger = value;
                this._validationDict["HasUpdateTrigger"] = true;
            }
        }
        
        public virtual object LookUpTableRow {
            get {
                return this._LookUpTableRow;
            }
            set {
                this._LookUpTableRow = value;
                this._validationDict["LookUpTableRow"] = true;
            }
        }
        
        public virtual string StrTableName {
            get {
                return this._TableName.ToString();
            }
        }
        
        public virtual string StrUpdateIdColumn {
            get {
                return this._UpdateIdColumn.ToString();
            }
        }
        
        public virtual string StrUpdateDateColumn {
            get {
                return this._UpdateDateColumn.ToString();
            }
        }
        
        public virtual string StrCreateDateColumn {
            get {
                return this._CreateDateColumn.ToString();
            }
        }
        
        public virtual string StrCreateIdColumn {
            get {
                return this._CreateIdColumn.ToString();
            }
        }
        
        public virtual string StrRowCount {
            get {
                return this._RowCount.ToString();
            }
        }
        
        public virtual string StrHasUpdateTrigger {
            get {
                return this._HasUpdateTrigger.ToString();
            }
        }
        
        public virtual string StrLookUpTableRow {
            get {
                return this._LookUpTableRow.ToString();
            }
        }
        
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StrTableName);
                sb.Append(delimiter);
                sb.Append(this.StrUpdateIdColumn);
                sb.Append(delimiter);
                sb.Append(this.StrUpdateDateColumn);
                sb.Append(delimiter);
                sb.Append(this.StrCreateDateColumn);
                sb.Append(delimiter);
                sb.Append(this.StrCreateIdColumn);
                sb.Append(delimiter);
                sb.Append(this.StrRowCount);
                sb.Append(delimiter);
                sb.Append(this.StrHasUpdateTrigger);
                sb.Append(delimiter);
                sb.Append(this.StrLookUpTableRow);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        public virtual bool Fill(CodeTableAudit dataClass) {
            try {
                this.TableName = dataClass.TableName;
                this.UpdateIdColumn = dataClass.UpdateIdColumn;
                this.UpdateDateColumn = dataClass.UpdateDateColumn;
                this.CreateDateColumn = dataClass.CreateDateColumn;
                this.CreateIdColumn = dataClass.CreateIdColumn;
                this.RowCount = dataClass.RowCount;
                this.HasUpdateTrigger = dataClass.HasUpdateTrigger;
                this.LookUpTableRow = dataClass.LookUpTableRow;
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(CodeTableAudit) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Data.SqlClient.SqlDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        public virtual bool Fill(System.Data.DataRow sourceDataRow) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(System.Data.DataRow sourceDataRow) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection nameValueColl) {
            try {
                if ((nameValueColl.GetValues("TableName") != null)) {
                    this.TableName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("TableName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("UpdateIdColumn") != null)) {
                    this.UpdateIdColumn = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("UpdateIdColumn")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("UpdateDateColumn") != null)) {
                    this.UpdateDateColumn = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("UpdateDateColumn")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("CreateDateColumn") != null)) {
                    this.CreateDateColumn = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("CreateDateColumn")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("CreateIdColumn") != null)) {
                    this.CreateIdColumn = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("CreateIdColumn")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("RowCount") != null)) {
                    this.RowCount = ((int)(System.Convert.ChangeType(nameValueColl.GetValues("RowCount")[0], typeof(int))));
                }
                if ((nameValueColl.GetValues("HasUpdateTrigger") != null)) {
                    this.HasUpdateTrigger = ((bool)(System.Convert.ChangeType(nameValueColl.GetValues("HasUpdateTrigger")[0], typeof(bool))));
                }
                if ((nameValueColl.GetValues("LookUpTableRow") != null)) {
                    this.LookUpTableRow = ((object)(System.Convert.ChangeType(nameValueColl.GetValues("LookUpTableRow")[0], typeof(object))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(NameValueCollection) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.TableName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(string))));
                this.UpdateIdColumn = ((string)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(string))));
                this.UpdateDateColumn = ((string)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(string))));
                this.CreateDateColumn = ((string)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(string))));
                this.CreateIdColumn = ((string)(System.Convert.ChangeType(sourceArray.GetValue(4), typeof(string))));
                this.RowCount = ((int)(System.Convert.ChangeType(sourceArray.GetValue(5), typeof(int))));
                this.HasUpdateTrigger = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(6), typeof(bool))));
                this.LookUpTableRow = ((object)(System.Convert.ChangeType(sourceArray.GetValue(7), typeof(object))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(System.Array) Method", ex);
            }
        }
        
        public virtual bool Fill(string delimString, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimString.Split(delimiter);
            try {
                this.TableName = ((string)(System.Convert.ChangeType(arrSplitString[0], typeof(string))));
                this.UpdateIdColumn = ((string)(System.Convert.ChangeType(arrSplitString[1], typeof(string))));
                this.UpdateDateColumn = ((string)(System.Convert.ChangeType(arrSplitString[2], typeof(string))));
                this.CreateDateColumn = ((string)(System.Convert.ChangeType(arrSplitString[3], typeof(string))));
                this.CreateIdColumn = ((string)(System.Convert.ChangeType(arrSplitString[4], typeof(string))));
                this.RowCount = ((int)(System.Convert.ChangeType(arrSplitString[5], typeof(int))));
                this.HasUpdateTrigger = ((bool)(System.Convert.ChangeType(arrSplitString[6], typeof(bool))));
                this.LookUpTableRow = ((object)(System.Convert.ChangeType(arrSplitString[7], typeof(object))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(string,char) Method", ex);
            }
        }
        
        public virtual bool Fill(string fixedString) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.Fill(string) Method", ex);
            }
        }
        
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.TableName.ToString());
                sb.Append(delimiter);
                sb.Append(this.UpdateIdColumn.ToString());
                sb.Append(delimiter);
                sb.Append(this.UpdateDateColumn.ToString());
                sb.Append(delimiter);
                sb.Append(this.CreateDateColumn.ToString());
                sb.Append(delimiter);
                sb.Append(this.CreateIdColumn.ToString());
                sb.Append(delimiter);
                sb.Append(this.RowCount.ToString());
                sb.Append(delimiter);
                sb.Append(this.HasUpdateTrigger.ToString());
                sb.Append(delimiter);
                sb.Append(this.LookUpTableRow.ToString());
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.GetDelimitedString(string) Method", ex);
            }
        }
        
        public virtual string[] GetStringArray() {
            string[] myArray = new string[8];
            try {
                myArray[0] = this._TableName.ToString();
                myArray[1] = this._UpdateIdColumn.ToString();
                myArray[2] = this._UpdateDateColumn.ToString();
                myArray[3] = this._CreateDateColumn.ToString();
                myArray[4] = this._CreateIdColumn.ToString();
                myArray[5] = this._RowCount.ToString();
                myArray[6] = this._HasUpdateTrigger.ToString();
                myArray[7] = this._LookUpTableRow.ToString();
                return myArray;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.GetStringArray() Method", ex);
            }
        }
        
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("TableName", this.TableName.ToString());
                nameValueColl.Add("UpdateIdColumn", this.UpdateIdColumn.ToString());
                nameValueColl.Add("UpdateDateColumn", this.UpdateDateColumn.ToString());
                nameValueColl.Add("CreateDateColumn", this.CreateDateColumn.ToString());
                nameValueColl.Add("CreateIdColumn", this.CreateIdColumn.ToString());
                nameValueColl.Add("RowCount", this.RowCount.ToString());
                nameValueColl.Add("HasUpdateTrigger", this.HasUpdateTrigger.ToString());
                nameValueColl.Add("LookUpTableRow", this.LookUpTableRow.ToString());
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: CodeTableAudit.GetNameValueCollection() Method", ex);
            }
        }
        
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["TableName"], typeof(bool)))) == false)) {
                missingValues.Add("TableName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["UpdateIdColumn"], typeof(bool)))) == false)) {
                missingValues.Add("UpdateIdColumn");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["UpdateDateColumn"], typeof(bool)))) == false)) {
                missingValues.Add("UpdateDateColumn");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["CreateDateColumn"], typeof(bool)))) == false)) {
                missingValues.Add("CreateDateColumn");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["CreateIdColumn"], typeof(bool)))) == false)) {
                missingValues.Add("CreateIdColumn");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["RowCount"], typeof(bool)))) == false)) {
                missingValues.Add("RowCount");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["HasUpdateTrigger"], typeof(bool)))) == false)) {
                missingValues.Add("HasUpdateTrigger");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["LookUpTableRow"], typeof(bool)))) == false)) {
                missingValues.Add("LookUpTableRow");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
