// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 3.4.1.16443 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.DbInformation {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignerCategory("Component")]
    [System.ComponentModel.DesignTimeVisible(true)]
    public partial class DatabaseItem {
        
        private string _DatabaseName = string.Empty;
        
        private bool _IsManuallyEntered = false;
        
        private System.Collections.Hashtable _validationDict;
        
        public DatabaseItem() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("DatabaseName", false);
            this._validationDict.Add("IsManuallyEntered", false);
        }
        
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        public virtual string DatabaseName {
            get {
                return this._DatabaseName;
            }
            set {
                this._DatabaseName = value;
                this._validationDict["DatabaseName"] = true;
            }
        }
        
        public virtual bool IsManuallyEntered {
            get {
                return this._IsManuallyEntered;
            }
            set {
                this._IsManuallyEntered = value;
                this._validationDict["IsManuallyEntered"] = true;
            }
        }
        
        public virtual string StrDatabaseName {
            get {
                return this._DatabaseName.ToString();
            }
        }
        
        public virtual string StrIsManuallyEntered {
            get {
                return this._IsManuallyEntered.ToString();
            }
        }
        
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StrDatabaseName);
                sb.Append(delimiter);
                sb.Append(this.StrIsManuallyEntered);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        public virtual bool Fill(DatabaseItem dataClass) {
            try {
                this.DatabaseName = dataClass.DatabaseName;
                this.IsManuallyEntered = dataClass.IsManuallyEntered;
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(DatabaseItem) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Data.SqlClient.SqlDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    if ((reader["DatabaseName"].Equals(System.DBNull.Value) == false)) {
                        this.DatabaseName = ((string)(System.Convert.ChangeType(reader["DatabaseName"], typeof(string))));
                    }
                    if ((reader["IsManuallyEntered"].Equals(System.DBNull.Value) == false)) {
                        this.IsManuallyEntered = ((bool)(System.Convert.ChangeType(reader["IsManuallyEntered"], typeof(bool))));
                    }
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        public virtual bool Fill(System.Data.DataRow sourceDataRow) {
            try {
                if ((sourceDataRow["DatabaseName"].Equals(System.DBNull.Value) == false)) {
                    this.DatabaseName = ((string)(System.Convert.ChangeType(sourceDataRow["DatabaseName"], typeof(string))));
                }
                if ((sourceDataRow["IsManuallyEntered"].Equals(System.DBNull.Value) == false)) {
                    this.IsManuallyEntered = ((bool)(System.Convert.ChangeType(sourceDataRow["IsManuallyEntered"], typeof(bool))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(System.Data.DataRow sourceDataRow) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection nameValueColl) {
            try {
                if ((nameValueColl.GetValues("DatabaseName") != null)) {
                    this.DatabaseName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("DatabaseName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("IsManuallyEntered") != null)) {
                    this.IsManuallyEntered = ((bool)(System.Convert.ChangeType(nameValueColl.GetValues("IsManuallyEntered")[0], typeof(bool))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(NameValueCollection) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.DatabaseName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(string))));
                this.IsManuallyEntered = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(bool))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(System.Array) Method", ex);
            }
        }
        
        public virtual bool Fill(string delimString, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimString.Split(delimiter);
            try {
                this.DatabaseName = ((string)(System.Convert.ChangeType(arrSplitString[0], typeof(string))));
                this.IsManuallyEntered = ((bool)(System.Convert.ChangeType(arrSplitString[1], typeof(bool))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(string,char) Method", ex);
            }
        }
        
        public virtual bool Fill(string fixedString) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.Fill(string) Method", ex);
            }
        }
        
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.DatabaseName.ToString());
                sb.Append(delimiter);
                sb.Append(this.IsManuallyEntered.ToString());
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.GetDelimitedString(string) Method", ex);
            }
        }
        
        public virtual string[] GetStringArray() {
            string[] myArray = new string[2];
            try {
                myArray[0] = this._DatabaseName.ToString();
                myArray[1] = this._IsManuallyEntered.ToString();
                return myArray;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.GetStringArray() Method", ex);
            }
        }
        
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("DatabaseName", this.DatabaseName.ToString());
                nameValueColl.Add("IsManuallyEntered", this.IsManuallyEntered.ToString());
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: DatabaseItem.GetNameValueCollection() Method", ex);
            }
        }
        
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["DatabaseName"], typeof(bool)))) == false)) {
                missingValues.Add("DatabaseName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["IsManuallyEntered"], typeof(bool)))) == false)) {
                missingValues.Add("IsManuallyEntered");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
